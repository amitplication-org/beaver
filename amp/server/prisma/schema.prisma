datasource postgres {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  createdAt DateTime   @default(now())
  customers Customer[]
  firstName String?
  id        String     @id @default(cuid())
  lastName  String?
  messages  Message[]
  password  String
  polls     Poll[]
  reports   Report[]
  roles     String[]
  updatedAt DateTime   @updatedAt
  username  String     @unique
}

model Building {
  buildingType  EnumBuildingBuildingType
  bulletinBoard BulletinBoard?
  city          City?                    @relation(fields: [cityId], references: [id])
  cityId        String?
  companies     Company[]
  createdAt     DateTime                 @default(now())
  id            String                   @id @default(cuid())
  loacation     String
  message       Message[]
  name          String                   @unique
  poll          Poll[]
  reports       Report[]
  updatedAt     DateTime                 @updatedAt
}

model Company {
  building   Building   @relation(fields: [buildingId], references: [id])
  buildingId String
  createdAt  DateTime   @default(now())
  customers  Customer[]
  id         String     @id @default(cuid())
  updatedAt  DateTime   @updatedAt
}

model Customer {
  company      Company                  @relation(fields: [companyId], references: [id])
  companyId    String
  createdAt    DateTime                 @default(now())
  customerType EnumCustomerCustomerType
  firstName    String
  id           String                   @id @default(cuid())
  lastName     String
  updatedAt    DateTime                 @updatedAt
  user         User?                    @relation(fields: [userId], references: [id])
  userId       String?
}

model Maintenance {
  createdAt       DateTime                       @default(now())
  description     String?
  id              String                         @id @default(cuid())
  maintenanceType EnumMaintenanceMaintenanceType
  name            String
  updatedAt       DateTime                       @updatedAt
}

model Report {
  building   Building @relation(fields: [buildingId], references: [id])
  buildingId String
  createdAt  DateTime @default(now())
  id         String   @id @default(cuid())
  name       String
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model Message {
  buildings       Building[]
  bulletinBoard   BulletinBoard? @relation(fields: [bulletinBoardId], references: [id])
  bulletinBoardId String?
  content         String?
  createdAt       DateTime       @default(now())
  id              String         @id @default(cuid())
  title           String?
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [userId], references: [id])
  userId          String
}

model Poll {
  buildings   Building[]
  content     Json
  createdAt   DateTime         @default(now())
  description String?
  id          String           @id @default(cuid())
  name        String           @unique
  pollType    EnumPollPollType
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id])
  userId      String
}

model BulletinBoard {
  building   Building? @relation(fields: [buildingId], references: [id])
  buildingId String?   @unique
  createdAt  DateTime  @default(now())
  id         String    @id @default(cuid())
  messages   Message[]
  updatedAt  DateTime  @updatedAt
}

model City {
  buildings Building[]
  createdAt DateTime   @default(now())
  id        String     @id @default(cuid())
  name      String?
  updatedAt DateTime   @updatedAt
}

enum EnumBuildingBuildingType {
  Residence
  Office
}

enum EnumCustomerCustomerType {
  Gold
  Silver
  Bronze
}

enum EnumMaintenanceMaintenanceType {
  Clean
  PestControl
  Gardening
  Design
}

enum EnumPollPollType {
  General
  Maintenance
  Committee
}