# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Building {
  buildingType: EnumBuildingBuildingType
  bulletinBoard: BulletinBoard
  city: City
  companies(orderBy: [CompanyOrderByInput!], skip: Float, take: Float, where: CompanyWhereInput): [Company!]!
  createdAt: DateTime!
  id: String!
  loacation: String!
  message(orderBy: [MessageOrderByInput!], skip: Float, take: Float, where: MessageWhereInput): [Message!]!
  name: String!
  poll(orderBy: [PollOrderByInput!], skip: Float, take: Float, where: PollWhereInput): [Poll!]!
  reports(orderBy: [ReportOrderByInput!], skip: Float, take: Float, where: ReportWhereInput): [Report!]!
  updatedAt: DateTime!
}

input BuildingCreateInput {
  buildingType: EnumBuildingBuildingType!
  bulletinBoard: BulletinBoardWhereUniqueInput
  city: CityWhereUniqueInput
  companies: CompanyCreateNestedManyWithoutBuildingsInput
  loacation: String!
  message: MessageCreateNestedManyWithoutBuildingsInput
  name: String!
  poll: PollCreateNestedManyWithoutBuildingsInput
  reports: ReportCreateNestedManyWithoutBuildingsInput
}

input BuildingCreateNestedManyWithoutCitiesInput {
  connect: [BuildingWhereUniqueInput!]
}

input BuildingCreateNestedManyWithoutMessagesInput {
  connect: [BuildingWhereUniqueInput!]
}

input BuildingCreateNestedManyWithoutPollsInput {
  connect: [BuildingWhereUniqueInput!]
}

input BuildingListRelationFilter {
  every: BuildingWhereInput
  none: BuildingWhereInput
  some: BuildingWhereInput
}

input BuildingOrderByInput {
  buildingType: SortOrder
  bulletinBoardId: SortOrder
  cityId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  loacation: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input BuildingUpdateInput {
  buildingType: EnumBuildingBuildingType
  bulletinBoard: BulletinBoardWhereUniqueInput
  city: CityWhereUniqueInput
  companies: CompanyUpdateManyWithoutBuildingsInput
  loacation: String
  message: MessageUpdateManyWithoutBuildingsInput
  name: String
  poll: PollUpdateManyWithoutBuildingsInput
  reports: ReportUpdateManyWithoutBuildingsInput
}

input BuildingUpdateManyWithoutCitiesInput {
  connect: [BuildingWhereUniqueInput!]
  disconnect: [BuildingWhereUniqueInput!]
  set: [BuildingWhereUniqueInput!]
}

input BuildingUpdateManyWithoutMessagesInput {
  connect: [BuildingWhereUniqueInput!]
  disconnect: [BuildingWhereUniqueInput!]
  set: [BuildingWhereUniqueInput!]
}

input BuildingUpdateManyWithoutPollsInput {
  connect: [BuildingWhereUniqueInput!]
  disconnect: [BuildingWhereUniqueInput!]
  set: [BuildingWhereUniqueInput!]
}

input BuildingWhereInput {
  buildingType: EnumBuildingBuildingType
  bulletinBoard: BulletinBoardWhereUniqueInput
  city: CityWhereUniqueInput
  companies: CompanyListRelationFilter
  id: StringFilter
  loacation: StringFilter
  message: MessageListRelationFilter
  name: StringFilter
  poll: PollListRelationFilter
  reports: ReportListRelationFilter
}

input BuildingWhereUniqueInput {
  id: String!
}

type BulletinBoard {
  buildings: Building
  createdAt: DateTime!
  id: String!
  messages(orderBy: [MessageOrderByInput!], skip: Float, take: Float, where: MessageWhereInput): [Message!]!
  updatedAt: DateTime!
}

input BulletinBoardCreateInput {
  buildings: BuildingWhereUniqueInput
  messages: MessageCreateNestedManyWithoutBulletinBoardsInput
}

input BulletinBoardOrderByInput {
  buildingsId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input BulletinBoardUpdateInput {
  buildings: BuildingWhereUniqueInput
  messages: MessageUpdateManyWithoutBulletinBoardsInput
}

input BulletinBoardWhereInput {
  buildings: BuildingWhereUniqueInput
  id: StringFilter
  messages: MessageListRelationFilter
}

input BulletinBoardWhereUniqueInput {
  id: String!
}

type City {
  buildings(orderBy: [BuildingOrderByInput!], skip: Float, take: Float, where: BuildingWhereInput): [Building!]!
  createdAt: DateTime!
  id: String!
  name: String
  updatedAt: DateTime!
}

input CityCreateInput {
  buildings: BuildingCreateNestedManyWithoutCitiesInput
  name: String
}

input CityOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CityUpdateInput {
  buildings: BuildingUpdateManyWithoutCitiesInput
  name: String
}

input CityWhereInput {
  buildings: BuildingListRelationFilter
  id: StringFilter
  name: StringNullableFilter
}

input CityWhereUniqueInput {
  id: String!
}

type Company {
  building: Building
  createdAt: DateTime!
  customers(orderBy: [CustomerOrderByInput!], skip: Float, take: Float, where: CustomerWhereInput): [Customer!]!
  id: String!
  updatedAt: DateTime!
}

input CompanyCreateInput {
  building: BuildingWhereUniqueInput!
  customers: CustomerCreateNestedManyWithoutCompaniesInput
}

input CompanyCreateNestedManyWithoutBuildingsInput {
  connect: [CompanyWhereUniqueInput!]
}

input CompanyListRelationFilter {
  every: CompanyWhereInput
  none: CompanyWhereInput
  some: CompanyWhereInput
}

input CompanyOrderByInput {
  buildingId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input CompanyUpdateInput {
  building: BuildingWhereUniqueInput
  customers: CustomerUpdateManyWithoutCompaniesInput
}

input CompanyUpdateManyWithoutBuildingsInput {
  connect: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
}

input CompanyWhereInput {
  building: BuildingWhereUniqueInput
  customers: CustomerListRelationFilter
  id: StringFilter
}

input CompanyWhereUniqueInput {
  id: String!
}

input Credentials {
  password: String!
  username: String!
}

type Customer {
  company: Company
  createdAt: DateTime!
  customerType: EnumCustomerCustomerType
  firstName: String!
  id: String!
  lastName: String!
  updatedAt: DateTime!
  user: User
}

input CustomerCreateInput {
  company: CompanyWhereUniqueInput!
  customerType: EnumCustomerCustomerType!
  firstName: String!
  lastName: String!
  user: UserWhereUniqueInput
}

input CustomerCreateNestedManyWithoutCompaniesInput {
  connect: [CustomerWhereUniqueInput!]
}

input CustomerCreateNestedManyWithoutUsersInput {
  connect: [CustomerWhereUniqueInput!]
}

input CustomerListRelationFilter {
  every: CustomerWhereInput
  none: CustomerWhereInput
  some: CustomerWhereInput
}

input CustomerOrderByInput {
  companyId: SortOrder
  createdAt: SortOrder
  customerType: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input CustomerUpdateInput {
  company: CompanyWhereUniqueInput
  customerType: EnumCustomerCustomerType
  firstName: String
  lastName: String
  user: UserWhereUniqueInput
}

input CustomerUpdateManyWithoutCompaniesInput {
  connect: [CustomerWhereUniqueInput!]
  disconnect: [CustomerWhereUniqueInput!]
  set: [CustomerWhereUniqueInput!]
}

input CustomerUpdateManyWithoutUsersInput {
  connect: [CustomerWhereUniqueInput!]
  disconnect: [CustomerWhereUniqueInput!]
  set: [CustomerWhereUniqueInput!]
}

input CustomerWhereInput {
  company: CompanyWhereUniqueInput
  customerType: EnumCustomerCustomerType
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  user: UserWhereUniqueInput
}

input CustomerWhereUniqueInput {
  id: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum EnumBuildingBuildingType {
  Office
  Residence
}

enum EnumCustomerCustomerType {
  Bronze
  Gold
  Silver
}

enum EnumMaintenanceMaintenanceType {
  Clean
  Design
  Gardening
  PestControl
}

enum EnumPollPollType {
  Committee
  General
  Maintenance
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  equals: JSONObject
  not: JSONObject
}

type Maintenance {
  createdAt: DateTime!
  description: String
  id: String!
  maintenanceType: EnumMaintenanceMaintenanceType
  name: String!
  updatedAt: DateTime!
}

input MaintenanceCreateInput {
  description: String
  maintenanceType: EnumMaintenanceMaintenanceType!
  name: String!
}

input MaintenanceOrderByInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  maintenanceType: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input MaintenanceUpdateInput {
  description: String
  maintenanceType: EnumMaintenanceMaintenanceType
  name: String
}

input MaintenanceWhereInput {
  description: StringNullableFilter
  id: StringFilter
  maintenanceType: EnumMaintenanceMaintenanceType
  name: StringFilter
}

input MaintenanceWhereUniqueInput {
  id: String!
}

type Message {
  buildings(orderBy: [BuildingOrderByInput!], skip: Float, take: Float, where: BuildingWhereInput): [Building!]!
  bulletinBoard: BulletinBoard
  content: String
  createdAt: DateTime!
  id: String!
  title: String
  updatedAt: DateTime!
  user: User
}

input MessageCreateInput {
  buildings: BuildingCreateNestedManyWithoutMessagesInput
  bulletinBoard: BulletinBoardWhereUniqueInput
  content: String
  title: String
  user: UserWhereUniqueInput!
}

input MessageCreateNestedManyWithoutBuildingsInput {
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateNestedManyWithoutBulletinBoardsInput {
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateNestedManyWithoutUsersInput {
  connect: [MessageWhereUniqueInput!]
}

input MessageListRelationFilter {
  every: MessageWhereInput
  none: MessageWhereInput
  some: MessageWhereInput
}

input MessageOrderByInput {
  bulletinBoardId: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input MessageUpdateInput {
  buildings: BuildingUpdateManyWithoutMessagesInput
  bulletinBoard: BulletinBoardWhereUniqueInput
  content: String
  title: String
  user: UserWhereUniqueInput
}

input MessageUpdateManyWithoutBuildingsInput {
  connect: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
}

input MessageUpdateManyWithoutBulletinBoardsInput {
  connect: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
}

input MessageUpdateManyWithoutUsersInput {
  connect: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
}

input MessageWhereInput {
  buildings: BuildingListRelationFilter
  bulletinBoard: BulletinBoardWhereUniqueInput
  content: StringNullableFilter
  id: StringFilter
  title: StringNullableFilter
  user: UserWhereUniqueInput
}

input MessageWhereUniqueInput {
  id: String!
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createBuilding(data: BuildingCreateInput!): Building!
  createBulletinBoard(data: BulletinBoardCreateInput!): BulletinBoard!
  createCity(data: CityCreateInput!): City!
  createCompany(data: CompanyCreateInput!): Company!
  createCustomer(data: CustomerCreateInput!): Customer!
  createMaintenance(data: MaintenanceCreateInput!): Maintenance!
  createMessage(data: MessageCreateInput!): Message!
  createPoll(data: PollCreateInput!): Poll!
  createReport(data: ReportCreateInput!): Report!
  createUser(data: UserCreateInput!): User!
  deleteBuilding(where: BuildingWhereUniqueInput!): Building!
  deleteBulletinBoard(where: BulletinBoardWhereUniqueInput!): BulletinBoard!
  deleteCity(where: CityWhereUniqueInput!): City!
  deleteCompany(where: CompanyWhereUniqueInput!): Company!
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer!
  deleteMaintenance(where: MaintenanceWhereUniqueInput!): Maintenance!
  deleteMessage(where: MessageWhereUniqueInput!): Message!
  deletePoll(where: PollWhereUniqueInput!): Poll!
  deleteReport(where: ReportWhereUniqueInput!): Report!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateBuilding(data: BuildingUpdateInput!, where: BuildingWhereUniqueInput!): Building!
  updateBulletinBoard(data: BulletinBoardUpdateInput!, where: BulletinBoardWhereUniqueInput!): BulletinBoard!
  updateCity(data: CityUpdateInput!, where: CityWhereUniqueInput!): City!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company!
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer!
  updateMaintenance(data: MaintenanceUpdateInput!, where: MaintenanceWhereUniqueInput!): Maintenance!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message!
  updatePoll(data: PollUpdateInput!, where: PollWhereUniqueInput!): Poll!
  updateReport(data: ReportUpdateInput!, where: ReportWhereUniqueInput!): Report!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Poll {
  buildings(orderBy: [BuildingOrderByInput!], skip: Float, take: Float, where: BuildingWhereInput): [Building!]!
  content: JSONObject!
  createdAt: DateTime!
  description: String
  id: String!
  name: String!
  pollType: EnumPollPollType
  updatedAt: DateTime!
  user: User
}

input PollCreateInput {
  buildings: BuildingCreateNestedManyWithoutPollsInput
  content: JSONObject!
  description: String
  name: String!
  pollType: EnumPollPollType!
  user: UserWhereUniqueInput!
}

input PollCreateNestedManyWithoutBuildingsInput {
  connect: [PollWhereUniqueInput!]
}

input PollCreateNestedManyWithoutUsersInput {
  connect: [PollWhereUniqueInput!]
}

input PollListRelationFilter {
  every: PollWhereInput
  none: PollWhereInput
  some: PollWhereInput
}

input PollOrderByInput {
  content: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  pollType: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input PollUpdateInput {
  buildings: BuildingUpdateManyWithoutPollsInput
  content: JSONObject
  description: String
  name: String
  pollType: EnumPollPollType
  user: UserWhereUniqueInput
}

input PollUpdateManyWithoutBuildingsInput {
  connect: [PollWhereUniqueInput!]
  disconnect: [PollWhereUniqueInput!]
  set: [PollWhereUniqueInput!]
}

input PollUpdateManyWithoutUsersInput {
  connect: [PollWhereUniqueInput!]
  disconnect: [PollWhereUniqueInput!]
  set: [PollWhereUniqueInput!]
}

input PollWhereInput {
  buildings: BuildingListRelationFilter
  content: JsonFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
  pollType: EnumPollPollType
  user: UserWhereUniqueInput
}

input PollWhereUniqueInput {
  id: String!
}

type Query {
  _buildingsMeta(orderBy: [BuildingOrderByInput!], skip: Float, take: Float, where: BuildingWhereInput): MetaQueryPayload!
  _bulletinBoardsMeta(orderBy: [BulletinBoardOrderByInput!], skip: Float, take: Float, where: BulletinBoardWhereInput): MetaQueryPayload!
  _citiesMeta(orderBy: [CityOrderByInput!], skip: Float, take: Float, where: CityWhereInput): MetaQueryPayload!
  _companiesMeta(orderBy: [CompanyOrderByInput!], skip: Float, take: Float, where: CompanyWhereInput): MetaQueryPayload!
  _customersMeta(orderBy: [CustomerOrderByInput!], skip: Float, take: Float, where: CustomerWhereInput): MetaQueryPayload!
  _maintenancesMeta(orderBy: [MaintenanceOrderByInput!], skip: Float, take: Float, where: MaintenanceWhereInput): MetaQueryPayload!
  _messagesMeta(orderBy: [MessageOrderByInput!], skip: Float, take: Float, where: MessageWhereInput): MetaQueryPayload!
  _pollsMeta(orderBy: [PollOrderByInput!], skip: Float, take: Float, where: PollWhereInput): MetaQueryPayload!
  _reportsMeta(orderBy: [ReportOrderByInput!], skip: Float, take: Float, where: ReportWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  building(where: BuildingWhereUniqueInput!): Building
  buildings(orderBy: [BuildingOrderByInput!], skip: Float, take: Float, where: BuildingWhereInput): [Building!]!
  bulletinBoard(where: BulletinBoardWhereUniqueInput!): BulletinBoard
  bulletinBoards(orderBy: [BulletinBoardOrderByInput!], skip: Float, take: Float, where: BulletinBoardWhereInput): [BulletinBoard!]!
  cities(orderBy: [CityOrderByInput!], skip: Float, take: Float, where: CityWhereInput): [City!]!
  city(where: CityWhereUniqueInput!): City
  companies(orderBy: [CompanyOrderByInput!], skip: Float, take: Float, where: CompanyWhereInput): [Company!]!
  company(where: CompanyWhereUniqueInput!): Company
  customer(where: CustomerWhereUniqueInput!): Customer
  customers(orderBy: [CustomerOrderByInput!], skip: Float, take: Float, where: CustomerWhereInput): [Customer!]!
  maintenance(where: MaintenanceWhereUniqueInput!): Maintenance
  maintenances(orderBy: [MaintenanceOrderByInput!], skip: Float, take: Float, where: MaintenanceWhereInput): [Maintenance!]!
  message(where: MessageWhereUniqueInput!): Message
  messages(orderBy: [MessageOrderByInput!], skip: Float, take: Float, where: MessageWhereInput): [Message!]!
  poll(where: PollWhereUniqueInput!): Poll
  polls(orderBy: [PollOrderByInput!], skip: Float, take: Float, where: PollWhereInput): [Poll!]!
  report(where: ReportWhereUniqueInput!): Report
  reports(orderBy: [ReportOrderByInput!], skip: Float, take: Float, where: ReportWhereInput): [Report!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

type Report {
  building: Building
  createdAt: DateTime!
  id: String!
  name: String!
  updatedAt: DateTime!
  user: User
}

input ReportCreateInput {
  building: BuildingWhereUniqueInput!
  name: String!
  user: UserWhereUniqueInput!
}

input ReportCreateNestedManyWithoutBuildingsInput {
  connect: [ReportWhereUniqueInput!]
}

input ReportCreateNestedManyWithoutUsersInput {
  connect: [ReportWhereUniqueInput!]
}

input ReportListRelationFilter {
  every: ReportWhereInput
  none: ReportWhereInput
  some: ReportWhereInput
}

input ReportOrderByInput {
  buildingId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ReportUpdateInput {
  building: BuildingWhereUniqueInput
  name: String
  user: UserWhereUniqueInput
}

input ReportUpdateManyWithoutBuildingsInput {
  connect: [ReportWhereUniqueInput!]
  disconnect: [ReportWhereUniqueInput!]
  set: [ReportWhereUniqueInput!]
}

input ReportUpdateManyWithoutUsersInput {
  connect: [ReportWhereUniqueInput!]
  disconnect: [ReportWhereUniqueInput!]
  set: [ReportWhereUniqueInput!]
}

input ReportWhereInput {
  building: BuildingWhereUniqueInput
  id: StringFilter
  name: StringFilter
  user: UserWhereUniqueInput
}

input ReportWhereUniqueInput {
  id: String!
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  customers(orderBy: [CustomerOrderByInput!], skip: Float, take: Float, where: CustomerWhereInput): [Customer!]!
  firstName: String
  id: String!
  lastName: String
  messages(orderBy: [MessageOrderByInput!], skip: Float, take: Float, where: MessageWhereInput): [Message!]!
  polls(orderBy: [PollOrderByInput!], skip: Float, take: Float, where: PollWhereInput): [Poll!]!
  reports(orderBy: [ReportOrderByInput!], skip: Float, take: Float, where: ReportWhereInput): [Report!]!
  roles: [String!]!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  customers: CustomerCreateNestedManyWithoutUsersInput
  firstName: String
  lastName: String
  messages: MessageCreateNestedManyWithoutUsersInput
  password: String!
  polls: PollCreateNestedManyWithoutUsersInput
  reports: ReportCreateNestedManyWithoutUsersInput
  roles: [String!]!
  username: String!
}

type UserInfo {
  accessToken: String
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  customers: CustomerUpdateManyWithoutUsersInput
  firstName: String
  lastName: String
  messages: MessageUpdateManyWithoutUsersInput
  password: String
  polls: PollUpdateManyWithoutUsersInput
  reports: ReportUpdateManyWithoutUsersInput
  roles: [String!]
  username: String
}

input UserWhereInput {
  customers: CustomerListRelationFilter
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  messages: MessageListRelationFilter
  polls: PollListRelationFilter
  reports: ReportListRelationFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
