/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateBulletinBoardArgs } from "./CreateBulletinBoardArgs";
import { UpdateBulletinBoardArgs } from "./UpdateBulletinBoardArgs";
import { DeleteBulletinBoardArgs } from "./DeleteBulletinBoardArgs";
import { BulletinBoardFindManyArgs } from "./BulletinBoardFindManyArgs";
import { BulletinBoardFindUniqueArgs } from "./BulletinBoardFindUniqueArgs";
import { BulletinBoard } from "./BulletinBoard";
import { MessageFindManyArgs } from "../../message/base/MessageFindManyArgs";
import { Message } from "../../message/base/Message";
import { Building } from "../../building/base/Building";
import { BulletinBoardService } from "../bulletinBoard.service";

@graphql.Resolver(() => BulletinBoard)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class BulletinBoardResolverBase {
  constructor(
    protected readonly service: BulletinBoardService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BulletinBoard",
    action: "read",
    possession: "any",
  })
  async _bulletinBoardsMeta(
    @graphql.Args() args: BulletinBoardFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BulletinBoard])
  @nestAccessControl.UseRoles({
    resource: "BulletinBoard",
    action: "read",
    possession: "any",
  })
  async bulletinBoards(
    @graphql.Args() args: BulletinBoardFindManyArgs
  ): Promise<BulletinBoard[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BulletinBoard, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BulletinBoard",
    action: "read",
    possession: "own",
  })
  async bulletinBoard(
    @graphql.Args() args: BulletinBoardFindUniqueArgs
  ): Promise<BulletinBoard | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BulletinBoard)
  @nestAccessControl.UseRoles({
    resource: "BulletinBoard",
    action: "create",
    possession: "any",
  })
  async createBulletinBoard(
    @graphql.Args() args: CreateBulletinBoardArgs
  ): Promise<BulletinBoard> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        buildings: args.data.buildings
          ? {
              connect: args.data.buildings,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BulletinBoard)
  @nestAccessControl.UseRoles({
    resource: "BulletinBoard",
    action: "update",
    possession: "any",
  })
  async updateBulletinBoard(
    @graphql.Args() args: UpdateBulletinBoardArgs
  ): Promise<BulletinBoard | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          buildings: args.data.buildings
            ? {
                connect: args.data.buildings,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BulletinBoard)
  @nestAccessControl.UseRoles({
    resource: "BulletinBoard",
    action: "delete",
    possession: "any",
  })
  async deleteBulletinBoard(
    @graphql.Args() args: DeleteBulletinBoardArgs
  ): Promise<BulletinBoard | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Message])
  @nestAccessControl.UseRoles({
    resource: "Message",
    action: "read",
    possession: "any",
  })
  async messages(
    @graphql.Parent() parent: BulletinBoard,
    @graphql.Args() args: MessageFindManyArgs
  ): Promise<Message[]> {
    const results = await this.service.findMessages(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Building, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Building",
    action: "read",
    possession: "any",
  })
  async buildings(
    @graphql.Parent() parent: BulletinBoard
  ): Promise<Building | null> {
    const result = await this.service.getBuildings(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
