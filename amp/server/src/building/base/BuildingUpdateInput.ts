/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { EnumBuildingBuildingType } from "./EnumBuildingBuildingType";
import { IsEnum, IsOptional, ValidateNested, IsString } from "class-validator";
import { BulletinBoardWhereUniqueInput } from "../../bulletinBoard/base/BulletinBoardWhereUniqueInput";
import { Type } from "class-transformer";
import { CityWhereUniqueInput } from "../../city/base/CityWhereUniqueInput";
import { CompanyUpdateManyWithoutBuildingsInput } from "./CompanyUpdateManyWithoutBuildingsInput";
import { MessageUpdateManyWithoutBuildingsInput } from "./MessageUpdateManyWithoutBuildingsInput";
import { PollUpdateManyWithoutBuildingsInput } from "./PollUpdateManyWithoutBuildingsInput";
import { ReportUpdateManyWithoutBuildingsInput } from "./ReportUpdateManyWithoutBuildingsInput";
@InputType()
class BuildingUpdateInput {
  @ApiProperty({
    required: false,
    enum: EnumBuildingBuildingType,
  })
  @IsEnum(EnumBuildingBuildingType)
  @IsOptional()
  @Field(() => EnumBuildingBuildingType, {
    nullable: true,
  })
  buildingType?: "Residence" | "Office";

  @ApiProperty({
    required: false,
    type: () => BulletinBoardWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => BulletinBoardWhereUniqueInput)
  @IsOptional()
  @Field(() => BulletinBoardWhereUniqueInput, {
    nullable: true,
  })
  bulletinBoard?: BulletinBoardWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => CityWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CityWhereUniqueInput)
  @IsOptional()
  @Field(() => CityWhereUniqueInput, {
    nullable: true,
  })
  city?: CityWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => CompanyUpdateManyWithoutBuildingsInput,
  })
  @ValidateNested()
  @Type(() => CompanyUpdateManyWithoutBuildingsInput)
  @IsOptional()
  @Field(() => CompanyUpdateManyWithoutBuildingsInput, {
    nullable: true,
  })
  companies?: CompanyUpdateManyWithoutBuildingsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  loacation?: string;

  @ApiProperty({
    required: false,
    type: () => MessageUpdateManyWithoutBuildingsInput,
  })
  @ValidateNested()
  @Type(() => MessageUpdateManyWithoutBuildingsInput)
  @IsOptional()
  @Field(() => MessageUpdateManyWithoutBuildingsInput, {
    nullable: true,
  })
  message?: MessageUpdateManyWithoutBuildingsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string;

  @ApiProperty({
    required: false,
    type: () => PollUpdateManyWithoutBuildingsInput,
  })
  @ValidateNested()
  @Type(() => PollUpdateManyWithoutBuildingsInput)
  @IsOptional()
  @Field(() => PollUpdateManyWithoutBuildingsInput, {
    nullable: true,
  })
  poll?: PollUpdateManyWithoutBuildingsInput;

  @ApiProperty({
    required: false,
    type: () => ReportUpdateManyWithoutBuildingsInput,
  })
  @ValidateNested()
  @Type(() => ReportUpdateManyWithoutBuildingsInput)
  @IsOptional()
  @Field(() => ReportUpdateManyWithoutBuildingsInput, {
    nullable: true,
  })
  reports?: ReportUpdateManyWithoutBuildingsInput;
}
export { BuildingUpdateInput };
