/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateBuildingArgs } from "./CreateBuildingArgs";
import { UpdateBuildingArgs } from "./UpdateBuildingArgs";
import { DeleteBuildingArgs } from "./DeleteBuildingArgs";
import { BuildingFindManyArgs } from "./BuildingFindManyArgs";
import { BuildingFindUniqueArgs } from "./BuildingFindUniqueArgs";
import { Building } from "./Building";
import { CompanyFindManyArgs } from "../../company/base/CompanyFindManyArgs";
import { Company } from "../../company/base/Company";
import { MessageFindManyArgs } from "../../message/base/MessageFindManyArgs";
import { Message } from "../../message/base/Message";
import { PollFindManyArgs } from "../../poll/base/PollFindManyArgs";
import { Poll } from "../../poll/base/Poll";
import { ReportFindManyArgs } from "../../report/base/ReportFindManyArgs";
import { Report } from "../../report/base/Report";
import { BulletinBoard } from "../../bulletinBoard/base/BulletinBoard";
import { City } from "../../city/base/City";
import { BuildingService } from "../building.service";

@graphql.Resolver(() => Building)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class BuildingResolverBase {
  constructor(
    protected readonly service: BuildingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Building",
    action: "read",
    possession: "any",
  })
  async _buildingsMeta(
    @graphql.Args() args: BuildingFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Building])
  @nestAccessControl.UseRoles({
    resource: "Building",
    action: "read",
    possession: "any",
  })
  async buildings(
    @graphql.Args() args: BuildingFindManyArgs
  ): Promise<Building[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Building, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Building",
    action: "read",
    possession: "own",
  })
  async building(
    @graphql.Args() args: BuildingFindUniqueArgs
  ): Promise<Building | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Building)
  @nestAccessControl.UseRoles({
    resource: "Building",
    action: "create",
    possession: "any",
  })
  async createBuilding(
    @graphql.Args() args: CreateBuildingArgs
  ): Promise<Building> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        bulletinBoard: args.data.bulletinBoard
          ? {
              connect: args.data.bulletinBoard,
            }
          : undefined,

        city: args.data.city
          ? {
              connect: args.data.city,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Building)
  @nestAccessControl.UseRoles({
    resource: "Building",
    action: "update",
    possession: "any",
  })
  async updateBuilding(
    @graphql.Args() args: UpdateBuildingArgs
  ): Promise<Building | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          bulletinBoard: args.data.bulletinBoard
            ? {
                connect: args.data.bulletinBoard,
              }
            : undefined,

          city: args.data.city
            ? {
                connect: args.data.city,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Building)
  @nestAccessControl.UseRoles({
    resource: "Building",
    action: "delete",
    possession: "any",
  })
  async deleteBuilding(
    @graphql.Args() args: DeleteBuildingArgs
  ): Promise<Building | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Company])
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "read",
    possession: "any",
  })
  async companies(
    @graphql.Parent() parent: Building,
    @graphql.Args() args: CompanyFindManyArgs
  ): Promise<Company[]> {
    const results = await this.service.findCompanies(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Message])
  @nestAccessControl.UseRoles({
    resource: "Message",
    action: "read",
    possession: "any",
  })
  async message(
    @graphql.Parent() parent: Building,
    @graphql.Args() args: MessageFindManyArgs
  ): Promise<Message[]> {
    const results = await this.service.findMessage(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Poll])
  @nestAccessControl.UseRoles({
    resource: "Poll",
    action: "read",
    possession: "any",
  })
  async poll(
    @graphql.Parent() parent: Building,
    @graphql.Args() args: PollFindManyArgs
  ): Promise<Poll[]> {
    const results = await this.service.findPoll(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Report])
  @nestAccessControl.UseRoles({
    resource: "Report",
    action: "read",
    possession: "any",
  })
  async reports(
    @graphql.Parent() parent: Building,
    @graphql.Args() args: ReportFindManyArgs
  ): Promise<Report[]> {
    const results = await this.service.findReports(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => BulletinBoard, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BulletinBoard",
    action: "read",
    possession: "any",
  })
  async bulletinBoard(
    @graphql.Parent() parent: Building
  ): Promise<BulletinBoard | null> {
    const result = await this.service.getBulletinBoard(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => City, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "City",
    action: "read",
    possession: "any",
  })
  async city(@graphql.Parent() parent: Building): Promise<City | null> {
    const result = await this.service.getCity(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
